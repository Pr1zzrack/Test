name: CI Pipeline for Develop

on:
  push:
    branches:
      - develop  # Пайплайн запускается при пуше в ветку develop
  pull_request:
    branches:
      - develop  # Пайплайн запускается для Pull Request в develop

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Шаг 1: Клонируем репозиторий
      - name: Checkout Code
        uses: actions/checkout@v3

      # Шаг 2: Устанавливаем Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Шаг 3: Устанавливаем зависимости
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Шаг 4: Устанавливаем переменные окружения
      - name: Set Environment Variables
        run: |
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          printf "SECRET_KEY=%s\n" "${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

      # Шаг 5: Запускаем тесты
      - name: Run Tests
        env:
          DJANGO_SETTINGS_MODULE: config.settings
        run: |
          python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test  # Этот шаг выполняется только если тесты прошли успешно
  
    steps:
      # Шаг 1: Клонируем репозиторий
      - name: Checkout Code
        uses: actions/checkout@v3
  
      # Шаг 2: Устанавливаем Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
  
      # Шаг 3: Логинимся в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
  
      # Шаг 4: Сборка Docker-образа
      - name: Build Docker Image
        run: |
          docker build \
            --build-arg DB_NAME="${{ secrets.DB_NAME }}" \
            --build-arg DB_USER="${{ secrets.DB_USER }}" \
            --build-arg DB_PASSWORD="${{ secrets.DB_PASSWORD }}" \
            --build-arg DB_HOST="${{ secrets.DB_HOST }}" \
            --build-arg DB_PORT="${{ secrets.DB_PORT }}" \
            --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
            -t saikal123/optics:develop .
  
      # Шаг 5: Пушим образ в Docker Hub
      - name: Push Docker Image
        run: |
          docker push saikal123/optics:develop
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]   # Run deploy job only if tests pass

    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up SSH private key
      - name: Set up SSH private key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa  # Add the SSH private key
          chmod 600 ~/.ssh/id_rsa  # Set secure permissions
          ssh-keyscan -H $SERVER_IP >> ~/.ssh/known_hosts  # Add the server to known hosts
          sudo apt-get install sshpass  # Install sshpass to handle password authentication
          echo "$SSH_PASSWORD" | sshpass ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa root@$SERVER_IP 'exit'  # Use password to authenticate
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          
      # Step 3: Grant execute permissions to the deploy script
      - name: Grant execute permissions to deploy.sh
        run: chmod +x deploy.sh

      # Step 4: Deploy Docker container using deploy.sh script
      - name: Deploy Docker container
        run: |
          ./deploy.sh
        env:
          SERVER_USER: ${{ secrets.SERVER_USER }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          DOCKER_IMAGE: saikal123/optics:develop  # Replace with your Docker image name
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}

          
